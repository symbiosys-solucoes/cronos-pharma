package br.symbiosys.solucoes.cronospharma.cronospharma.entidades

import br.symbiosys.solucoes.cronospharma.cronospharma.entidades.consys.PedidoCONSYS
import br.symbiosys.solucoes.cronospharma.cronospharma.entidades.ems.EMS
import org.hamcrest.MatcherAssert.assertThat
import org.hamcrest.Matchers.*
import org.junit.jupiter.api.Test
import java.io.BufferedReader
import java.io.File
import java.io.FileReader
import java.time.LocalDate

internal class TipoIntegracaoTest {


    @Test
    fun `dado um arquivo EMS deve retornar um objeto EMS`(){
        val arquivo = File.createTempFile("PEDEMS_01260848000112_20200908124543","txt")
            arquivo.writeText(contentFileEms)

        val fileReader = FileReader(arquivo.path)
        val bufferedReader = BufferedReader(fileReader)

        val ems: EMS = TipoIntegracao.toEms(arquivo.path)


        assertThat(ems.codigoCliente, equalTo("13197261000357"))
        assertThat(ems.numeroPedido, equalTo("19873499"))
        assertThat(ems.dataPedido, equalTo(LocalDate.of(2020,9,8)))
        assertThat(ems.numeroPedidoCliente, equalTo("LEG585786"))
        assertThat(ems.codigoRepresentante, equalTo("3009"))
        assertThat(ems.produtos, hasSize(31))
        assertThat(ems.produtos?.first()?.codigoProduto ?: "Prdouto Nulo", equalTo("7894916142632"))
        assertThat(ems.produtos?.first()?.quantidade ?: "Prdouto Nulo", equalTo(1.0))
        assertThat(ems.produtos?.first()?.desconto ?: "Prdouto Nulo", equalTo(57.72))
        assertThat(ems.produtos?.first()?.prazo ?: "Prdouto Nulo", equalTo("000"))

    }

    @Test
    fun `dado um arquivo CONSYS deve retornar um lista de objetos CONSYS`(){
        val arquivo = File.createTempFile("EXPPED","PED")
        arquivo.writeText(contentFileCONSYS)

        val fileReader = FileReader(arquivo.path)
        val bufferedReader = BufferedReader(fileReader)

        val pedidos: List<PedidoCONSYS> = TipoIntegracao.toConsys(arquivo.path)
        val pedido = pedidos.first()

        assertThat(pedidos.size, equalTo(2))
        assertThat(pedido.cnpj, equalTo("35295807000183"))
        assertThat(pedido.idPedido, equalTo("J171145331"))
        assertThat(pedido.dataPedido, equalTo(LocalDate.of(2020,11,17)))
        assertThat(pedido.cliente, equalTo("00000162"))
        assertThat(pedido.produtos, hasSize(61))
        assertThat(pedido.produtos?.first()?.codigo ?: "Produto Nulo", equalTo("0000001272"))
        assertThat(pedido.produtos?.first()?.quantidade ?: "Produto Nulo", equalTo(3.0))
        assertThat(pedido.produtos?.first()?.codigoCONSYS ?: "Produto Nulo", equalTo("00000021"))


    }


    private final val contentFileCONSYS:String =
                "100000162  \n" +
                "2J171145331\n" +
                "335295807000183\n" +
                "4   \n" +
                "520201117\n" +
                "61241\n" +
                "7000000127200003   00000021\n" +
                "7000004433400007   00079641\n" +
                "7000003002300020   00048834\n" +
                "7000001287400031   00048814\n" +
                "7000006516100001   04912881\n" +
                "7000005229900001   00012191\n" +
                "7000006453500022   04707281\n" +
                "7000005411900001   04850001\n" +
                "7000000116800001   00003281\n" +
                "7000006172700003   04782131\n" +
                "7000006173500001   04782251\n" +
                "7000006373900002   04480921\n" +
                "7000004190400001   04924321\n" +
                "7000006372700001   04417871\n" +
                "7000006511900011   04912391\n" +
                "7000006557800001   05056641\n" +
                "7000006505800001   04335651\n" +
                "7000005816500001   00002701\n" +
                "7000006435900002   04700811\n" +
                "7000006386400001   04970121\n" +
                "7000006670000049   05058231\n" +
                "7000006191300001   04992861\n" +
                "7000004212900001   00017771\n" +
                "7000004279000001   04479401\n" +
                "7000004684100002   04821791\n" +
                "7000005648000001   04384871\n" +
                "7000006527500001   04966511\n" +
                "7000006323600001   04659121\n" +
                "7000006179400011   04775221\n" +
                "7000006325700097   04397161\n" +
                "7000000116100001   04316821\n" +
                "7000001743400008   04319381\n" +
                "7000006399100002   04376371\n" +
                "7000006465900002   04929574\n" +
                "7000001265300001   00064211\n" +
                "7000000081500001   00019021\n" +
                "7000000057500015   00047341\n" +
                "7000005778900010   04667741\n" +
                "7000006392600003   00029061\n" +
                "7000006502900002   04349281\n" +
                "7000006528800001   04967501\n" +
                "7000006561700001   05084101\n" +
                "7000006584700007   04929331\n" +
                "7000006584800001   04395821\n" +
                "7000001032400001   00066671\n" +
                "7000006432900002   04619011\n" +
                "7000000118900003   00045431\n" +
                "7000004155600005   00052991\n" +
                "7000004166100006   00078281\n" +
                "7000004167000014   00022201\n" +
                "7000006652300001   05045331\n" +
                "7000006379800034   05047891\n" +
                "7000003325100001   00065034\n" +
                "7000005074100001   04933551\n" +
                "7000000121100001   00063911\n" +
                "7000006396700003   04751251\n" +
                "7000000116400001   04304301\n" +
                "7000001296300001   00064224\n" +
                "7000006330600001   04420401\n" +
                "7000005948000001   04419581\n" +
                "7000000087800001   04331981\n" +
                "80000000061\n" +
                "100000075  \n" +
                "2J171145334\n" +
                "304676578000113\n" +
                "4   \n" +
                "520201117\n" +
                "61241\n" +
                "7000004433400002   00079641\n" +
                "7000000094400036   00075801\n" +
                "7000006516100011   04912881\n" +
                "7000006388300001   00002181\n" +
                "7000006684700001   04979301\n" +
                "7000005411900001   04850001\n" +
                "7000001082000010   04398751\n" +
                "7000006428300001   04472661\n" +
                "7000000116800001   00003281\n" +
                "7000005094600001   00069771\n" +
                "7000006680600038   05075601\n" +
                "7000006172700001   04782131\n" +
                "7000006175100001   04843701\n" +
                "7000006373900001   04480921\n" +
                "7000006372700001   04417871\n" +
                "7000006612300001   05010781\n" +
                "7000006511900004   04912391\n" +
                "7000006557800001   05056641\n" +
                "7000006505800001   04335651\n" +
                "7000005816500001   00002701\n" +
                "7000006389900001   00064031\n" +
                "7000006431800004   04794661\n" +
                "7000006435900002   04700811\n" +
                "7000006386400003   04970121\n" +
                "7000006670000130   05058231\n" +
                "7000006535600002   05044111\n" +
                "7000004212900005   00017771\n" +
                "7000006581500039   05071321\n" +
                "7000002438400001   00040681\n" +
                "7000004684100002   04821791\n" +
                "7000006179400007   04775221\n" +
                "7000006325700036   04397161\n" +
                "7000001743400013   04319381\n" +
                "7000006399100001   04376371\n" +
                "7000000081500001   00019021\n" +
                "7000000057500011   00047341\n" +
                "7000005778900007   04667741\n" +
                "7000006392600003   00029061\n" +
                "7000006528800001   04967501\n" +
                "7000006561700001   05084101\n" +
                "7000006584700006   04929331\n" +
                "7000006584800007   04395821\n" +
                "7000004312500001   04641944\n" +
                "7000006432900008   04619011\n" +
                "7000006364300002   05085681\n" +
                "7000006512200003   04953001\n" +
                "7000000118900011   00045431\n" +
                "7000006379400002   04369461\n" +
                "7000004155600010   00052991\n" +
                "7000006503600001   04395451\n" +
                "7000004166100001   00078281\n" +
                "7000004167000007   00022201\n" +
                "7000001034000001   04739631\n" +
                "7000006652300001   05045331\n" +
                "7000006379800013   05047891\n" +
                "7000001294700001   00072151\n" +
                "7000006412300001   04840141\n" +
                "7000004759700001   04857931\n" +
                "7000000121100001   00063911\n" +
                "7000000116400001   04304301\n" +
                "7000001296300007   00064224\n" +
                "7000006330600001   04420401\n" +
                "7000005948000001   04419581\n" +
                "7000000087800001   04331981\n" +
                "80000000064\n" +
                "\u001A"

    private final val contentFileEms =
            "0PEDIDO OPER.LOG01260848000112 202009080000000057507378000365 \n" +
            "101319726100035719873499    08092020IC00000LEG585786      3009\n" +
            "40014820/30/40                      00300000020030040000000000033330333303334000000000000000\n" +
            "219873499    78949161426320000105772000ZZ 1\n" +
            "219873499    78949161438680000107826000ZZ 2\n" +
            "219873499    78960047043950000204661000ZZ 3\n" +
            "219873499    78949161456950000207343000ZZ 4\n" +
            "219873499    78949161434310000206859000ZZ 5\n" +
            "219873499    78960048101880001205531000ZZ 6\n" +
            "219873499    78960048102250000107463000ZZ 7\n" +
            "219873499    78960047257720000107926000ZZ 8\n" +
            "219873499    78949161454590000107947000ZZ 9\n" +
            "219873499    78949161451140000107584000ZZ 10\n" +
            "219873499    78949161451210000307584000ZZ 11\n" +
            "219873499    78960047150320000406739000ZZ 12\n" +
            "219873499    78949161481080000406300000ZZ 13\n" +
            "219873499    78949161456880000207826000ZZ 14\n" +
            "219873499    78960047567210000104661000ZZ 15\n" +
            "219873499    78960047684650000206859000ZZ 16\n" +
            "219873499    78960047684720000206859000ZZ 17\n" +
            "219873499    78949161430280004808309000ZZ 18\n" +
            "219873499    78949161407060000308973000ZZ 19\n" +
            "219873499    78949161406900000208792000ZZ 20\n" +
            "219873499    78960047341320000103477000ZZ 21\n" +
            "219873499    78960047226890000206859000ZZ 22\n" +
            "219873499    78949161404230000208973000ZZ 23\n" +
            "219873499    78949161411230000407100000ZZ 24\n" +
            "219873499    78960047078460001606618000ZZ 25\n" +
            "219873499    78960047208380000906135000ZZ 26\n" +
            "219873499    78960047152300000506135000ZZ 27\n" +
            "219873499    78960047039540002006859000ZZ 28\n" +
            "219873499    78949161479720000407947000ZZ 29\n" +
            "219873499    78960047600630000204000000ZZ 30\n" +
            "219873499    78960047390830000101544000ZZ 31\n" +
            "319873499    000310000000161\n"
}